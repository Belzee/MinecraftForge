--- ../src_base/minecraft_server/net/minecraft/src/BlockRail.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src_work/minecraft_server/net/minecraft/src/BlockRail.java	0000-00-00 00:00:00.000000000 -0000
@@ -18,12 +18,12 @@
     public static final boolean isRailBlockAt(World world, int i, int j, int k)
     {
         int l = world.getBlockId(i, j, k);
-        return l == Block.rail.blockID || l == Block.railPowered.blockID || l == Block.railDetector.blockID;
+        return Block.blocksList[l] instanceof BlockRail;
     }
 
     public static final boolean isRailBlock(int i)
     {
-        return i == Block.rail.blockID || i == Block.railPowered.blockID || i == Block.railDetector.blockID;
+    	return Block.blocksList[i] instanceof BlockRail;
     }
 
     protected BlockRail(int i, int j, boolean flag)
@@ -99,7 +99,7 @@
 
     public boolean canPlaceBlockAt(World world, int i, int j, int k)
     {
-        return world.isBlockNormalCube(i, j - 1, k);
+        return world.isBlockSolidOnSide(i, j - 1, k,1);
     }
 
     public void onBlockAdded(World world, int i, int j, int k)
@@ -123,23 +123,23 @@
             j1 &= 7;
         }
         boolean flag = false;
-        if(!world.isBlockNormalCube(i, j - 1, k))
+        if(!world.isBlockSolidOnSide(i, j - 1, k,1))
         {
             flag = true;
         }
-        if(j1 == 2 && !world.isBlockNormalCube(i + 1, j, k))
+        if(j1 == 2 && !world.isBlockSolidOnSide(i + 1, j, k,1))
         {
             flag = true;
         }
-        if(j1 == 3 && !world.isBlockNormalCube(i - 1, j, k))
+        if(j1 == 3 && !world.isBlockSolidOnSide(i - 1, j, k,1))
         {
             flag = true;
         }
-        if(j1 == 4 && !world.isBlockNormalCube(i, j, k - 1))
+        if(j1 == 4 && !world.isBlockSolidOnSide(i, j, k - 1,1))
         {
             flag = true;
         }
-        if(j1 == 5 && !world.isBlockNormalCube(i, j, k + 1))
+        if(j1 == 5 && !world.isBlockSolidOnSide(i, j, k + 1,1))
         {
             flag = true;
         }
@@ -313,8 +313,118 @@
         return 0;
     }
 
+    /**
+     * This function is no longer called by Minecraft
+     */
     static boolean isPoweredBlockRail(BlockRail blockrail)
     {
         return blockrail.isPowered;
     }
+    
+    /**
+     * Return true if the rail can make corners.
+     * Used by placement logic.
+     * @param world The world.
+     * @param i The rail X coordinate.
+     * @param j The rail Y coordinate.
+     * @param k The rail Z coordinate.
+     * @return True if the rail can make corners.
+     */
+    public boolean isFlexibleRail(World world, int i, int j, int k)
+    {
+        return !isPowered;
+    }
+
+    /**
+     * Returns true if the rail can make up and down slopes.
+     * Used by placement logic.
+     * @param world The world.
+     * @param i The rail X coordinate.
+     * @param j The rail Y coordinate.
+     * @param k The rail Z coordinate.
+     * @return True if the rail can make slopes.
+     */
+    public boolean canMakeSlopes(World world, int i, int j, int k)
+    {
+        return true;
+    }
+
+    /**
+     * Return the rails metadata (without the power bit if the rail uses one).
+     * Can be used to make the cart think the rail something other than it is,
+     * for example when making diamond junctions or switches.
+     * The cart parameter will often be null unless it it called from EntityMinecart.
+     * 
+     * Valid rail metadata is defined as follows:
+     * 0x0: flat track going North-South
+     * 0x1: flat track going West-East
+     * 0x2: track ascending to the East
+     * 0x3: track ascending to the West
+     * 0x4: track ascending to the North
+     * 0x5: track ascending to the South
+     * 0x6: WestNorth corner (connecting East and South)
+     * 0x7: EastNorth corner (connecting West and South)
+     * 0x8: EastSouth corner (connecting West and North)
+     * 0x9: WestSouth corner (connecting East and North)
+     * 
+     * All directions are Notch defined.
+     * In MC Beta 1.8.3 the Sun rises in the North.
+     * In MC 1.0.0 the Sun rises in the East.
+     * @param world The world.
+     * @param cart The cart asking for the metadata, null if it is not called by EntityMinecart.
+     * @param i The rail X coordinate.
+     * @param j The rail Y coordinate.
+     * @param k The rail Z coordinate.
+     * @return The metadata.
+     */
+    public int getBasicRailMetadata(IBlockAccess world, EntityMinecart cart, int i, int j, int k)
+    {
+        int meta = world.getBlockMetadata(i, j, k);
+        if(isPowered) {
+            meta = meta & 7;
+        }
+        return meta;
+    }
+	 
+    /**
+     * Returns the max speed of the rail at [i, j, k].
+     * @param world The world.
+     * @param cart The cart on the rail, may be null.
+     * @param i The rail X coordinate.
+     * @param j The rail Y coordinate.
+     * @param k The rail Z coordinate.
+     * @return The max speed of the current rail.
+     */
+    public float getRailMaxSpeed(World world, EntityMinecart cart, int i, int j, int k)
+    {
+        return 0.4f;
+    }
+	 
+    /**
+     * This function is called by any minecart that passes over this rail.
+     * It is called once per update tick that the minecart is on the rail.
+     * @param world The world.
+     * @param cart The cart on the rail.
+     * @param i The rail X coordinate.
+     * @param j The rail Y coordinate.
+     * @param k The rail Z coordinate.
+     */
+    public void onMinecartPass(World world, EntityMinecart cart, int i, int j, int k)
+    {
+    }
+    
+    /**
+     * Return true if this rail uses the 4th bit as a power bit.
+     * Avoid using this function when getBasicRailMetadata() can be used instead.
+     * The only reason to use this function is if you wish to change the rails metadata.
+     * @param world The world.
+     * @param i The rail X coordinate.
+     * @param j The rail Y coordinate.
+     * @param k The rail Z coordinate.
+     * @return True if the 4th bit is a power bit.
+     */
+    public boolean hasPowerBit(World world, int i, int j, int k)
+    {
+        return isPowered;
+    }
 }
