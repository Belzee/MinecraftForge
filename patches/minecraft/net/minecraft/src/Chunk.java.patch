--- ../src_base/minecraft/net/minecraft/src/Chunk.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src_work/minecraft/net/minecraft/src/Chunk.java	0000-00-00 00:00:00.000000000 -0000
@@ -3,6 +3,7 @@
 // Decompiler options: packimports(3) braces deadcode fieldsfirst 
 
 package net.minecraft.src;
+import net.minecraft.src.forge.*;
 
 import java.io.PrintStream;
 import java.util.*;
@@ -351,11 +352,12 @@
         blocks[i << worldObj.xShift | k << worldObj.heightShift | j] = (byte)(byte0 & 0xff);
         if(l1 != 0)
         {
+        	int meta = getBlockMetadata(i, j, k);
             if(!worldObj.multiplayerWorld)
             {
                 Block.blocksList[l1].onBlockRemoval(worldObj, i2, j, j2);
             } else
-            if(Block.blocksList[l1] instanceof BlockContainer)
+            if(Block.blocksList[l1] != null && Block.blocksList[l1].hasTileEntity(meta))
             {
                 worldObj.removeBlockTileEntity(i2, j, j2);
             }
@@ -385,12 +387,12 @@
             {
                 Block.blocksList[l].onBlockAdded(worldObj, i2, j, j2);
             }
-            if(Block.blocksList[l] instanceof BlockContainer)
+            if(Block.blocksList[l] != null && Block.blocksList[l].hasTileEntity(i1))
             {
                 TileEntity tileentity = getChunkBlockTileEntity(i, j, k);
                 if(tileentity == null)
                 {
-                    tileentity = ((BlockContainer)Block.blocksList[l]).getBlockEntity();
+                    tileentity = Block.blocksList[l].getTileEntity(i1);
                     worldObj.setBlockTileEntity(i, j, k, tileentity);
                 }
                 if(tileentity != null)
@@ -398,15 +400,7 @@
                     tileentity.updateContainingBlockInfo();
                 }
             }
-        } else
-        if(l1 > 0 && (Block.blocksList[l1] instanceof BlockContainer))
-        {
-            TileEntity tileentity1 = getChunkBlockTileEntity(i, j, k);
-            if(tileentity1 != null)
-            {
-                tileentity1.updateContainingBlockInfo();
-            }
-        }
+        } 
         isModified = true;
         return true;
     }
@@ -430,7 +424,11 @@
         blocks[i << worldObj.xShift | k << worldObj.heightShift | j] = (byte)(byte0 & 0xff);
         if(k1 != 0)
         {
-            Block.blocksList[k1].onBlockRemoval(worldObj, l1, j, i2);
+        	if (!worldObj.multiplayerWorld) 
+        	{
+        		Block.blocksList[k1].onBlockRemoval(worldObj, l1, j, i2);
+        	}
+        	removeChunkBlockTileEntity(i, j, k);
         }
         data.setNibble(i, j, k, 0);
         if(Block.lightOpacity[byte0 & 0xff] != 0)
@@ -453,27 +451,21 @@
             {
                 Block.blocksList[l].onBlockAdded(worldObj, l1, j, i2);
             }
-            if(l > 0 && (Block.blocksList[l] instanceof BlockContainer))
+            int meta = getBlockMetadata(i, j, k);
+            if(l > 0 && Block.blocksList[l] != null && Block.blocksList[l].hasTileEntity(meta))
             {
                 TileEntity tileentity = getChunkBlockTileEntity(i, j, k);
                 if(tileentity == null)
                 {
-                    tileentity = ((BlockContainer)Block.blocksList[l]).getBlockEntity();
+                    tileentity = Block.blocksList[l].getTileEntity(meta);
                     worldObj.setBlockTileEntity(i, j, k, tileentity);
                 }
                 if(tileentity != null)
                 {
                     tileentity.updateContainingBlockInfo();
+                    tileentity.blockMetadata = meta;
                 }
             }
-        } else
-        if(k1 > 0 && (Block.blocksList[k1] instanceof BlockContainer))
-        {
-            TileEntity tileentity1 = getChunkBlockTileEntity(i, j, k);
-            if(tileentity1 != null)
-            {
-                tileentity1.updateContainingBlockInfo();
-            }
         }
         isModified = true;
         return true;
@@ -494,7 +486,8 @@
         }
         data.setNibble(i, j, k, l);
         int j1 = getBlockID(i, j, k);
-        if(j1 > 0 && (Block.blocksList[j1] instanceof BlockContainer))
+        
+        if(j1 > 0 && Block.blocksList[j1] != null && Block.blocksList[j1].hasTileEntity(i1))
         {
             TileEntity tileentity = getChunkBlockTileEntity(i, j, k);
             if(tileentity != null)
@@ -609,27 +602,38 @@
     {
         ChunkPosition chunkposition = new ChunkPosition(i, j, k);
         TileEntity tileentity = (TileEntity)chunkTileEntityMap.get(chunkposition);
+        if(tileentity != null && tileentity.isInvalid())
+        {
+            chunkTileEntityMap.remove(chunkposition);
+            tileentity=null;
+        }
         if(tileentity == null)
         {
             int l = getBlockID(i, j, k);
-            if(!Block.isBlockContainer[l])
+        	int meta = getBlockMetadata(i, j, k);
+            if(Block.blocksList[l] == null || !Block.blocksList[l].hasTileEntity(meta))
             {
                 return null;
             }
             if(tileentity == null)
             {
-                tileentity = ((BlockContainer)Block.blocksList[l]).getBlockEntity();
+            	tileentity = Block.blocksList[l].getTileEntity(meta);
                 worldObj.setBlockTileEntity(xPosition * 16 + i, j, zPosition * 16 + k, tileentity);
             }
             tileentity = (TileEntity)chunkTileEntityMap.get(chunkposition);
         }
-        if(tileentity != null && tileentity.isInvalid())
-        {
-            chunkTileEntityMap.remove(chunkposition);
-            return null;
-        } else
+        return tileentity;
+    }
+
+    /* FORGE: Used to remove only invalid TileEntities */
+    public void cleanChunkBlockTileEntity(int i, int j, int k)
+    {
+        ChunkPosition chunkposition = new ChunkPosition(i, j, k);
+        if(isChunkLoaded)
         {
-            return tileentity;
+            TileEntity tileentity = (TileEntity)chunkTileEntityMap.get(chunkposition);
+            if(tileentity != null && tileentity.isInvalid())
+            	chunkTileEntityMap.remove(chunkposition);
         }
     }
 
@@ -641,7 +645,7 @@
         setChunkBlockTileEntity(i, j, k, tileentity);
         if(isChunkLoaded)
         {
-            worldObj.loadedTileEntityList.add(tileentity);
+            worldObj.addTileEntity(tileentity);
         }
     }
 
@@ -652,11 +656,15 @@
         tileentity.xCoord = xPosition * 16 + i;
         tileentity.yCoord = j;
         tileentity.zCoord = zPosition * 16 + k;
-        if(getBlockID(i, j, k) == 0 || !(Block.blocksList[getBlockID(i, j, k)] instanceof BlockContainer))
+        int id = getBlockID(i, j, k);
+        int meta = getBlockMetadata(i, j, k);
+        if(id == 0 || Block.blocksList[id] == null || !Block.blocksList[id].hasTileEntity(meta))
         {
             return;
         } else
         {
+        	TileEntity old = (TileEntity)chunkTileEntityMap.get(chunkposition);
+        	if (old != null) old.invalidate();
             tileentity.validate();
             chunkTileEntityMap.put(chunkposition, tileentity);
             return;
@@ -810,6 +818,15 @@
     public int setChunkData(byte abyte0[], int i, int j, int k, int l, int i1, int j1, 
             int k1)
     {
+    	TileEntity te;
+    	Iterator iterator = chunkTileEntityMap.values().iterator();
+    	while (iterator.hasNext()){
+    		te = (TileEntity)iterator.next();
+    		te.updateContainingBlockInfo();
+    		te.getBlockMetadata();
+    		te.getBlockType();
+    	}
+    	
         for(int l1 = i; l1 < l; l1++)
         {
             for(int l2 = k; l2 < j1; l2++)
@@ -859,12 +876,29 @@
 
         }
 
-        TileEntity tileentity;
-        for(Iterator iterator = chunkTileEntityMap.values().iterator(); iterator.hasNext(); tileentity.updateContainingBlockInfo())
-        {
-            tileentity = (TileEntity)iterator.next();
+        List<TileEntity> invalidList=new ArrayList();
+        iterator = chunkTileEntityMap.values().iterator(); 
+        while(iterator.hasNext()) 
+        {
+            te = (TileEntity)iterator.next();
+            if ((te.xCoord & 15) >= i && (te.xCoord & 15) <= l &&
+		        (te.yCoord >= j) && (te.yCoord <= i1) &&
+		        (te.zCoord & 15) >= k && (te.zCoord & 15) <=j1) {
+            	
+			    Block bl = te.getBlockType();
+			    if (bl != null && 
+			        bl.blockID == worldObj.getBlockId(te.xCoord, te.yCoord, te.zCoord) &&
+				    te.getBlockMetadata() == worldObj.getBlockMetadata(te.xCoord, te.yCoord, te.zCoord))
+				    continue;
+			    
+			    invalidList.add(te);
+            }
         }
 
+        for(TileEntity te2 : invalidList)
+        {
+        	te2.invalidate();
+        }
         return k1;
     }
 
