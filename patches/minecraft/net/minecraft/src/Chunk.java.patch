--- ../src_base/minecraft/net/minecraft/src/Chunk.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src_work/minecraft/net/minecraft/src/Chunk.java	0000-00-00 00:00:00.000000000 -0000
@@ -3,6 +3,7 @@
 // Decompiler options: packimports(3) braces deadcode fieldsfirst 
 
 package net.minecraft.src;
+import net.minecraft.src.forge.*;
 
 import java.io.PrintStream;
 import java.util.*;
@@ -348,6 +349,13 @@
         }
         int i2 = xPosition * 16 + i;
         int j2 = zPosition * 16 + k;
+        
+        if (Block.blocksList[l1] instanceof IOverrideReplace) {
+        	IOverrideReplace iovr = (IOverrideReplace)Block.blocksList[l1];
+        	if (!iovr.canReplaceBlock(worldObj, i2, j, j2, l))
+        		return iovr.getReplacedSuccess();
+        }
+        
         blocks[i << worldObj.field_35471_b | k << worldObj.field_35473_a | j] = (byte)(byte0 & 0xff);
         if(l1 != 0)
         {
@@ -390,7 +398,7 @@
                 TileEntity tileentity = getChunkBlockTileEntity(i, j, k);
                 if(tileentity == null)
                 {
-                    tileentity = ((BlockContainer)Block.blocksList[l]).getBlockEntity();
+                    tileentity = ((BlockContainer)Block.blocksList[l]).getBlockEntity(i1);
                     worldObj.setBlockTileEntity(i, j, k, tileentity);
                 }
                 if(tileentity != null)
@@ -398,14 +406,6 @@
                     tileentity.func_35144_b();
                 }
             }
-        } else
-        if(l1 > 0 && (Block.blocksList[l1] instanceof BlockContainer))
-        {
-            TileEntity tileentity1 = getChunkBlockTileEntity(i, j, k);
-            if(tileentity1 != null)
-            {
-                tileentity1.func_35144_b();
-            }
         }
         isModified = true;
         return true;
@@ -427,10 +427,17 @@
         }
         int l1 = xPosition * 16 + i;
         int i2 = zPosition * 16 + k;
+        if (Block.blocksList[k1] instanceof IOverrideReplace) {
+        	IOverrideReplace iovr = (IOverrideReplace)Block.blocksList[k1];
+        	if (!iovr.canReplaceBlock(worldObj, l1, j, i2, l))
+        		return iovr.getReplacedSuccess();
+        }
         blocks[i << worldObj.field_35471_b | k << worldObj.field_35473_a | j] = (byte)(byte0 & 0xff);
         if(k1 != 0)
         {
-            Block.blocksList[k1].onBlockRemoval(worldObj, l1, j, i2);
+        	if (!worldObj.multiplayerWorld)
+        		Block.blocksList[k1].onBlockRemoval(worldObj, l1, j, i2);
+        	removeChunkBlockTileEntity(i, j, k);
         }
         data.setNibble(i, j, k, 0);
         if(Block.lightOpacity[byte0 & 0xff] != 0)
@@ -458,7 +465,7 @@
                 TileEntity tileentity = getChunkBlockTileEntity(i, j, k);
                 if(tileentity == null)
                 {
-                    tileentity = ((BlockContainer)Block.blocksList[l]).getBlockEntity();
+                    tileentity = ((BlockContainer)Block.blocksList[l]).getBlockEntity(0);
                     worldObj.setBlockTileEntity(i, j, k, tileentity);
                 }
                 if(tileentity != null)
@@ -466,14 +473,6 @@
                     tileentity.func_35144_b();
                 }
             }
-        } else
-        if(k1 > 0 && (Block.blocksList[k1] instanceof BlockContainer))
-        {
-            TileEntity tileentity1 = getChunkBlockTileEntity(i, j, k);
-            if(tileentity1 != null)
-            {
-                tileentity1.func_35144_b();
-            }
         }
         isModified = true;
         return true;
@@ -609,6 +608,11 @@
     {
         ChunkPosition chunkposition = new ChunkPosition(i, j, k);
         TileEntity tileentity = (TileEntity)chunkTileEntityMap.get(chunkposition);
+        if(tileentity != null && tileentity.isInvalid())
+        {
+            chunkTileEntityMap.remove(chunkposition);
+            tileentity=null;
+        }
         if(tileentity == null)
         {
             int l = getBlockID(i, j, k);
@@ -618,18 +622,23 @@
             }
             if(tileentity == null)
             {
-                tileentity = ((BlockContainer)Block.blocksList[l]).getBlockEntity();
+                tileentity = ((BlockContainer)Block.blocksList[l]).getBlockEntity(getBlockMetadata(i,j,k));
                 worldObj.setBlockTileEntity(xPosition * 16 + i, j, zPosition * 16 + k, tileentity);
             }
             tileentity = (TileEntity)chunkTileEntityMap.get(chunkposition);
         }
-        if(tileentity != null && tileentity.isInvalid())
-        {
-            chunkTileEntityMap.remove(chunkposition);
-            return null;
-        } else
+        return tileentity;
+    }
+
+    /* FORGE: Used to remove only invalid TileEntities */
+    public void cleanChunkBlockTileEntity(int i, int j, int k)
+    {
+        ChunkPosition chunkposition = new ChunkPosition(i, j, k);
+        if(isChunkLoaded)
         {
-            return tileentity;
+            TileEntity tileentity = (TileEntity)chunkTileEntityMap.get(chunkposition);
+            if(tileentity != null && tileentity.isInvalid())
+            	chunkTileEntityMap.remove(chunkposition);
         }
     }
 
@@ -641,7 +650,7 @@
         setChunkBlockTileEntity(i, j, k, tileentity);
         if(isChunkLoaded)
         {
-            worldObj.loadedTileEntityList.add(tileentity);
+            worldObj.addTileEntity(tileentity);
         }
     }
 
@@ -657,6 +666,8 @@
             return;
         } else
         {
+        	TileEntity old = (TileEntity)chunkTileEntityMap.get(chunkposition);
+        	if (old != null) old.invalidate();
             tileentity.validate();
             chunkTileEntityMap.put(chunkposition, tileentity);
             return;
@@ -810,6 +821,15 @@
     public int setChunkData(byte abyte0[], int i, int j, int k, int l, int i1, int j1, 
             int k1)
     {
+    	TileEntity te;
+    	Iterator iterator = chunkTileEntityMap.values().iterator();
+    	while (iterator.hasNext()){
+    		te = (TileEntity)iterator.next();
+    		te.func_35144_b();
+    		te.getBlockMetadata();
+    		te.getBlockType();
+    	}
+    	
         for(int l1 = i; l1 < l; l1++)
         {
             for(int l2 = k; l2 < j1; l2++)
@@ -859,12 +879,25 @@
 
         }
 
-        TileEntity tileentity;
-        for(Iterator iterator = chunkTileEntityMap.values().iterator(); iterator.hasNext(); tileentity.func_35144_b())
-        {
-            tileentity = (TileEntity)iterator.next();
+        List<TileEntity> invalidList=new ArrayList();
+        iterator = chunkTileEntityMap.values().iterator(); 
+        while(iterator.hasNext()) {
+            te = (TileEntity)iterator.next();
+            if ((te.xCoord & 15) >= i && (te.xCoord & 15) <= l &&
+		        (te.yCoord >= j) && (te.yCoord <= i1) &&
+		        (te.zCoord & 15) >= k && (te.zCoord & 15) <=j1) {
+            	
+			    Block bl = te.getBlockType();
+			    if (bl != null && 
+			        bl.blockID == worldObj.getBlockId(te.xCoord, te.yCoord, te.zCoord) &&
+				    te.getBlockMetadata() == worldObj.getBlockMetadata(te.xCoord, te.yCoord, te.zCoord))
+				    continue;
+			    
+			    invalidList.add(te);
+            }
         }
-
+        for(TileEntity te2 : invalidList)
+        	te2.invalidate();
         return k1;
     }
 
