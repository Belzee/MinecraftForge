--- ../src_base/minecraft/net/minecraft/src/Block.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src_work/minecraft/net/minecraft/src/Block.java	0000-00-00 00:00:00.000000000 -0000
@@ -4,6 +4,7 @@
 
 package net.minecraft.src;
 
+import net.minecraft.src.forge.ForgeHooks;
 import java.util.ArrayList;
 import java.util.Random;
 
@@ -312,12 +313,14 @@
 
     public float getBlockBrightness(IBlockAccess iblockaccess, int i, int j, int k)
     {
-        return iblockaccess.getBrightness(i, j, k, lightValue[blockID]);
+        return iblockaccess.getBrightness(i, j, k,
+        		getLightValue(iblockaccess,i,j,k));
     }
 
     public int getMixedBrightnessForBlock(IBlockAccess iblockaccess, int i, int j, int k)
     {
-        return iblockaccess.getLightBrightnessForSkyBlocks(i, j, k, lightValue[blockID]);
+        return iblockaccess.getLightBrightnessForSkyBlocks(i, j, k,
+        		getLightValue(iblockaccess,i,j,k));
     }
 
     public boolean shouldSideBeRendered(IBlockAccess iblockaccess, int i, int j, int k, int l)
@@ -438,25 +441,41 @@
     {
         return 1;
     }
-
+    
+    /* FORGE: Metadata-sensitive version.
+     */
+    public int quantityDropped(int i, Random random)
+    {
+        return quantityDropped(random);
+    }
+    
     public int idDropped(int i, Random random, int j)
     {
         return blockID;
     }
 
+    /* FORGE: This function isnt called by Minecraft anymore.  Use
+     * blockStrength(EntityPlayer,int) instead.
+     */
     public float blockStrength(EntityPlayer entityplayer)
     {
-        if(blockHardness < 0.0F)
-        {
-            return 0.0F;
-        }
-        if(!entityplayer.canHarvestBlock(this))
-        {
-            return 1.0F / blockHardness / 100F;
-        } else
-        {
-            return entityplayer.getCurrentPlayerStrVsBlock(this) / blockHardness / 30F;
-        }
+        return blockStrength(entityplayer,0);
+    }
+
+    /* FORGE: This function returns the complete list of drops for a block.
+     */
+    public ArrayList<ItemStack> getBlockDropped(World world,
+        	    int i, int j, int k, int md) {
+    	ArrayList<ItemStack> tr=new ArrayList<ItemStack>();
+
+    	int q=quantityDropped(md,world.rand);
+    	for(int n=0; n<q; n++) {
+    		int id = idDropped(md, world.rand, 0);
+    		if(id > 0) {
+    			tr.add(new ItemStack(id,1,damageDropped(md)));
+    		}
+    	}
+    	return tr;
     }
 
     public final void dropBlockAsItem(World world, int i, int j, int k, int l, int i1)
@@ -470,18 +489,13 @@
         {
             return;
         }
-        int j1 = func_40198_a(i1, world.rand);
-        for(int k1 = 0; k1 < j1; k1++)
-        {
+        ArrayList<ItemStack> ar = getBlockDropped(world,i,j,k,l);
+        for (ItemStack ist : ar) {
             if(world.rand.nextFloat() > f)
             {
                 continue;
             }
-            int l1 = idDropped(l, world.rand, i1);
-            if(l1 > 0)
-            {
-                dropBlockAsItem_do(world, i, j, k, new ItemStack(l1, 1, damageDropped(l)));
-            }
+        	dropBlockAsItem_do(world, i, j, k, ist);
         }
 
     }
@@ -805,6 +819,96 @@
         return iblockaccess.isBlockNormalCube(i, j, k) ? 0.2F : 1.0F;
     }
 
+    /* FORGE: Allow a block to set illumination on a coordinate basis.
+     */
+    public int getLightValue(IBlockAccess iba, int i, int j, int k) {
+	    return lightValue[blockID];
+    }
+
+    /* FORGE: Implement and return true if you wish this block to behave
+     * like a ladder when the player is inside.
+     */
+    public boolean isLadder() {
+	return false;
+    }
+
+    /* FORGE: Return true if the block is a normal, solid cube.  This
+     * determines indirect power state, entity ejection from blocks, and a few
+     * others.
+     */
+    public boolean isBlockNormalCube(World world, int i, int j, int k) {
+	    return blockMaterial.getIsOpaque() && renderAsNormalBlock();
+    }
+
+    /* FORGE: Return true if the block is solid on the given side.  This
+     * is used by placement logic. */
+    public boolean isBlockSolidOnSide( World world, int i, int j, int k,
+		    int side ) {
+	    return isBlockNormalCube(world,i,j,k);
+    }
+
+    /* FORGE: Return true if the player can place a new block in the block
+     * occupied by this one, like water, lava, fire, etc.
+     */
+    public boolean isBlockReplaceable( World world, int i, int j, int k ) {
+	    return false;
+    }
+
+    /* FORGE: Return true if this block should set fire and deal fire damage
+     * to entities coming into contact with it, false otherwise.
+     */
+    public boolean isBlockBurning( World world, int i, int j, int k ) {
+	    return false;
+    }
+
+    /* FORGE: Return true if this block should be treated as an air block
+     * by the rest of the code, false otherwise.  This method is primarily
+     * useful for creating pure logic-blocks that will be invisible 
+     * to the player and otherwise interact as air would.  
+     */	
+    public boolean isAirBlock( World world, int i, int j, int k ) {
+	    return false;
+    }
+
+    /* FORGE: Return the block hardness with metadata md.
+     */
+    public float getHardness(int md) {
+	    return blockHardness;
+    }
+
+    /* FORGE: Return the block strength of the block at i,j,k against the
+     * player.
+     */
+    public float blockStrength(World world, EntityPlayer player,
+		    int i, int j, int k) {
+	    int md=world.getBlockMetadata(i,j,k);
+	    return blockStrength(player,md);
+    }
+
+    /* FORGE: Return the block strength of a prototypical block with metadata
+     * md against the player.
+     */
+    public float blockStrength(EntityPlayer player, int md) {
+	    return ForgeHooks.blockStrength(this,player,md);
+    }
+
+    /* FORGE: Return true if the player can harvest a prototypical block with
+     * metadata md.
+     */
+    public boolean canHarvestBlock(EntityPlayer player, int md) {
+	    return ForgeHooks.canHarvestBlock(this,player,md);
+    }
+
+    /* FORGE: Called when a player removes a block.  This is responsible for
+     * actually destroying the block, and the block is intact at time of call.
+     * This is called regardless of whether the player can harvest the block or
+     * not.  Return true if the block is actually destroyed.
+     */
+    public boolean removeBlockByPlayer(World world, EntityPlayer player,
+		    int i, int j, int k) {
+        return world.setBlockWithNotify(i, j, k, 0);
+    }
+
     static Class _mthclass$(String s)
     {
         try
